{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["localizer","momentLocalizer","moment","formats","agendaHeaderFormat","culture","start","end","format","ColoredDateCellWrapper","children","React","cloneElement","Children","only","style","backgroundColor","App","useState","data","setData","useEffect","Papa","parse","download","header","complete","console","log","events","i","length","startDate","split","startTime","startDateTime","Date","endDate","endTime","endDateTime","push","id","title","allDay","resource","className","src","logo","alt","components","eventWrapper","height","defaultView","views","onSelectEvent","event","window","open","focus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAAe,G,MAAA,IAA0B,kC,wBCOnCA,EAAYC,YAAgBC,KAE9BC,EAAU,CACZC,mBAAoB,WAAiBC,EAASL,GAA1B,IAAGM,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAV,OAClBP,EAAUQ,OAAOF,EAAO,aAAcD,GAAW,WACjDL,EAAUQ,OAAOD,EAAK,aAAcF,KAGlCI,EAAyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC7BC,IAAMC,aAAaD,IAAME,SAASC,KAAKJ,GAAW,CAChDK,MAAO,CACLC,gBAAiB,cAkERC,MA9Df,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,KAqCb,OAlCAC,qBAAU,WACRC,IAAKC,MAAM,iJAAkJ,CAC3JC,UAAU,EACVC,QAAQ,EACRC,SAAU,SAACP,GACTQ,QAAQC,IAAIT,GAEZ,IADA,IAAIU,EAAS,GACLC,EAAI,EAAGA,EAAIX,EAAKA,KAAKY,OAAQD,IAAK,CAExC,IAAME,EAAYb,EAAKA,KAAKW,GAAGE,UAAUC,MAAM,KACzCC,EAAYf,EAAKA,KAAKW,GAAGI,UAAUD,MAAM,KAC3CE,EAAgB,IAAIC,KAAKJ,EAAU,GAAIA,EAAU,GAAG,EAAGA,EAAU,GAAIE,EAAU,GAAIA,EAAU,IAE7FG,EAAUlB,EAAKA,KAAKW,GAAGO,QAAQJ,MAAM,KACrCK,EAAUnB,EAAKA,KAAKW,GAAGQ,QAAQL,MAAM,KACrCM,EAAc,IAAIH,KAAKC,EAAQ,GAAIA,EAAQ,GAAG,EAAGA,EAAQ,GAAIC,EAAQ,GAAIA,EAAQ,IAErFT,EAAOW,KACL,CACEC,GAAIX,EACJY,MAAOvB,EAAKA,KAAKW,GAAGY,MACpBC,OAAQxB,EAAKA,KAAKW,GAAGa,OACrBrC,MAAO6B,EACP5B,IAAKgC,EACLK,SAAUzB,EAAKA,KAAKW,GAAGc,WAI7BxB,EAAQS,GACRF,QAAQC,IAAIC,QAGf,IAGD,qBAAKgB,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,OAAOC,IAAKC,EAAMC,IAAI,kBAEvC,cAAC,IAAD,CACEnB,OAAQV,EACR8B,WAAY,CACVC,aAAczC,GAEhBT,UAAWA,EACXe,MAAO,CACLoC,OAAQ,OAEVC,YAAY,QACZC,MAAO,CAAC,QAAS,OAAQ,MAAO,UAChCC,cAAe,SAAAC,GAAK,OAAIC,OAAOC,KAAKF,EAAMX,SAAU,UAAUc,SAC9DvD,QAASA,UCjEJwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7b50fbcc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.22ebb9c2.svg\";","import React, { useEffect, useState } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\nimport moment from 'moment'\nimport './App.css';\nimport logo from './logo.svg';\nimport Papa from 'papaparse';\n\nconst localizer = momentLocalizer(moment)\n\nlet formats = {\n  agendaHeaderFormat: ({ start, end }, culture, localizer) =>\n    localizer.format(start, 'DD/MM/YYYY', culture) + ' â€” ' +\n    localizer.format(end, 'DD/MM/YYYY', culture),\n}\n\nconst ColoredDateCellWrapper = ({ children }) =>\n  React.cloneElement(React.Children.only(children), {\n    style: {\n      backgroundColor: '#742059',\n    },\n});\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    Papa.parse('https://docs.google.com/spreadsheets/d/e/2PACX-1vR69L6X2MEag5khuuB4TGDXtlpbJNPjP-CDCffxyZlyXtWKmDok_d1uZmnXJoKKcj1BmNQMu_JIOW97/pub?output=csv', {\n      download: true,\n      header: true,\n      complete: (data) => {\n        console.log(data);\n        var events = [];\n        for(var i = 0; i < data.data.length; i++) {\n\n          const startDate = data.data[i].startDate.split('/');\n          const startTime = data.data[i].startTime.split(':')\n          var startDateTime = new Date(startDate[2], startDate[1]-1, startDate[0], startTime[0], startTime[1])\n\n          var endDate = data.data[i].endDate.split('/');\n          var endTime = data.data[i].endTime.split(':')\n          var endDateTime = new Date(endDate[2], endDate[1]-1, endDate[0], endTime[0], endTime[1])\n\n          events.push(\n            {\n              id: i,\n              title: data.data[i].title,\n              allDay: data.data[i].allDay,\n              start: startDateTime,\n              end: endDateTime,\n              resource: data.data[i].resource,\n            }\n          );\n        }\n        setData(events);\n        console.log(events);\n      }\n    })\n  }, []);\n\n  return (\n    <div className=\"root\">\n      <div className=\"container\">\n        <div className=\"header\">\n          <img className=\"logo\" src={logo} alt=\"Homeinstead\" />\n        </div>\n        <Calendar\n          events={data}\n          components={{\n            eventWrapper: ColoredDateCellWrapper\n          }}\n          localizer={localizer}\n          style={{ \n            height: '85%',\n          }}\n          defaultView='month'\n          views={['month', 'week', 'day', 'agenda']}\n          onSelectEvent={event => window.open(event.resource, '_blank').focus()}\n          formats={formats}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}